{
	"info": {
		"_postman_id": "dd456583-0bd6-413f-98af-2b0254280c71",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38230577"
	},
	"item": [
		{
			"name": "Subscription",
			"item": [
				{
					"name": "Создание подписки на несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user.id))",
									"        pm.collectionVariables.set(\"userId\", Number(user.id + 1))",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(404);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание подписки несуществующим подписчиком",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"",
									"        pm.collectionVariables.set(\"userId\", Number(user.id))",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user.id + 1))",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(404);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подписка уже существует",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user2.id))",
									"        await api.addSubscription(user1.id, user2.id);",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(409);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    console.log(target)",
									"    pm.expect(target).to.have.property('message');",
									"    pm.expect(target.message).to.eql('Подписка уже существует');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "У пользователя нет группы подписчиков",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        let user = rnd.getUser()",
									"        user.subscriberGroup = 'NOBODY';",
									"        const user1 = await api.addUser(user);",
									"        ",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user2.id))",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(409);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "У пользователя есть группа подписчиков, но подписчика там нет",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        let user = rnd.getUser()",
									"        user.subscriberGroup = 'SUBSCRIBER_OF_SUBSCRIBERS';",
									"        const user1 = await api.addUser(user);",
									"        ",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user2.id))",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(409);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "У пользователя есть группа подписчиков, но подписчик там есть",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        ",
									"        await api.addSubscription(user1.id, user2.id);",
									"        await api.changeSubscriberGroup(user1.id, 'SUBSCRIBER_OF_SUBSCRIBERS');",
									"        console.log(user2.id, user3.id)",
									"        await api.addSubscription(user2.id, user3.id);",
									"",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user3.id))",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Группа пользователей по умолчанию - Все",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriberId\", Number(user2.id))",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление подписки для несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        await api.addSubscription(user1.id, user2.id);",
									"        pm.collectionVariables.set(\"userId\", user1.id + 999)",
									"        pm.collectionVariables.set(\"subscriberId\", user2.id)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(404);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление подписки для несуществующего подписчика",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        await api.addSubscription(user1.id, user2.id);",
									"        pm.collectionVariables.set(\"userId\", user1.id)",
									"        pm.collectionVariables.set(\"subscriberId\", user2.id + 999)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(404);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующей подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"userId\", user1.id)",
									"        pm.collectionVariables.set(\"subscriberId\", user2.id)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(404);",
									"});",
									"pm.test(\"Есть сообщение об ошибке\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное удаление подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"const createdSubscription = pm.collectionVariables.get('response');",
									"",
									"const userId = pm.collectionVariables.get('userId');",
									"const subscriberId = pm.collectionVariables.get('subscriberId');",
									"",
									"pm.test(\"Пользователи найдены до выполнения запроса\", function() {",
									"    pm.expect(createdSubscription.userId).to.eql(Number(userId));",
									"    pm.expect(createdSubscription.subscriberId).to.eql(Number(subscriberId));",
									"});",
									"",
									"const req = {",
									"                url: \"http://localhost:8080/users/subscriptions/\" + userId + \"/\" + subscriberId,",
									"                method: \"GET\",",
									"                header: { \"Content-Type\": \"application/json\" },",
									"            };",
									"pm.sendRequest(req, (error, response) => {",
									"    pm.test(\"Подписка удалена после выполнения запроса\", function(){",
									"        pm.expect(response.json()).to.eql(false);",
									"    });",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const subscription = await api.addSubscription(user1.id, user2.id);",
									"        pm.collectionVariables.set(\"response\", subscription)",
									"        pm.collectionVariables.set(\"userId\", user1.id)",
									"        pm.collectionVariables.set(\"subscriberId\", user2.id)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение несуществующей подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"userId\", user1.id)",
									"        pm.collectionVariables.set(\"subscriberId\", user2.id)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Запрос о существовании пользователя должен вернуть false\", function() {",
									"    pm.expect(target).to.eql(false);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId",
								":subscriberId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное получение подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        const user4 = await api.addUser(rnd.getUser());",
									"",
									"        await api.addSubscription(user1.id, user2.id);",
									"        await api.addSubscription(user1.id, user3.id);",
									"        await api.addSubscription(user2.id, user4.id);",
									"        ",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriber1\", user2)",
									"        pm.collectionVariables.set(\"subscriber2\", user3)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"const target = pm.response.json();",
									"const subscriber1 = pm.collectionVariables.get('subscriber1');",
									"const subscriber2 = pm.collectionVariables.get('subscriber2');",
									"",
									"pm.test(\"Проверка результата поиска подписчиков у пользователя\", function () {",
									"    pm.expect(target.length).to.eql(2);",
									"    pm.expect(target[0].id).to.eql(subscriber1.id);",
									"    pm.expect(target[1].id).to.eql(subscriber2.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"subscriptions",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recommendation",
			"item": [
				{
					"name": "Получение рекомендованных пользователей",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        const user4 = await api.addUser(rnd.getUser());",
									"        const user5 = await api.addUser(rnd.getUser());",
									"",
									"        await api.addSubscription(user1.id, user2.id);",
									"        await api.addSubscription(user1.id, user3.id);",
									"        await api.addSubscription(user2.id, user5.id);",
									"        await api.addSubscription(user3.id, user5.id);",
									"        await api.addSubscription(user2.id, user4.id);",
									"        ",
									"        pm.collectionVariables.set(\"userId\", Number(user1.id))",
									"        pm.collectionVariables.set(\"subscriber1\", user5)",
									"        pm.collectionVariables.set(\"subscriber2\", user4)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"const target = pm.response.json();",
									"const recomUser1 = pm.collectionVariables.get('subscriber1');",
									"const recomUser2 = pm.collectionVariables.get('subscriber2');",
									"",
									"pm.test(\"Проверка результата поиска рекомендованных пользователей\", function () {",
									"    pm.expect(target.length).to.eql(2);",
									"    pm.expect(target[0].id).to.eql(recomUser1.id);",
									"    pm.expect(target[1].id).to.eql(recomUser2.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/recommendations/:userId/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"recommendations",
								":userId",
								"user"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение рекомендованных мероприятий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        const user4 = await api.addUser(rnd.getUser());",
									"        const user5 = await api.addUser(rnd.getUser());",
									"",
									"        await api.addSubscription(user2.id, user3.id);",
									"        await api.addSubscription(user2.id, user4.id);",
									"",
									"        const category = await api.addCategory(rnd.getCategory());",
									"",
									"        let eventBody1 = rnd.getEvent(category.id);",
									"        eventBody1['requestModeration'] = false",
									"        let event1 = await api.addEvent(user1.id, eventBody1);",
									"        event1 = await api.publishEvent(event1.id);",
									"",
									"        let eventBody2 = rnd.getEvent(category.id);",
									"        eventBody2['requestModeration'] = false",
									"        let event2 = await api.addEvent(user1.id, eventBody2);",
									"        event2 = await api.publishEvent(event2.id);",
									"",
									"        let eventBody3 = rnd.getEvent(category.id);",
									"        eventBody3['requestModeration'] = false",
									"        let event3 = await api.addEvent(user1.id, eventBody3);",
									"        event3 = await api.publishEvent(event3.id);",
									"        ",
									"        await api.publishParticipationRequest(event1.id, user3.id);",
									"        await api.publishParticipationRequest(event1.id, user4.id);",
									"        await api.publishParticipationRequest(event2.id, user4.id);",
									"        await api.publishParticipationRequest(event3.id, user5.id);",
									"",
									"        pm.collectionVariables.set(\"userId\", user2.id)",
									"        pm.collectionVariables.set(\"event1\", event1)",
									"        pm.collectionVariables.set(\"event2\", event2)",
									"    } catch(err) {",
									"        console.error(\"������ ��� ���������� �������� ������.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"const target = pm.response.json();",
									"const recomEvent1 = pm.collectionVariables.get('event1');",
									"const recomEvent2 = pm.collectionVariables.get('event2');",
									"",
									"pm.test(\"Проверка результата поиска рекомендованных мероприятий\", function () {",
									"    pm.expect(target.length).to.eql(2);",
									"    pm.expect(target[0].id).to.eql(recomEvent1.id);",
									"    pm.expect(target[1].id).to.eql(recomEvent2.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/recommendations/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"recommendations",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"������ ��� ���������� ������ ������������: \", verbose);",
					"    }",
					"    ",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"������ ��� ���������� ����� ���������: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"������ ��� ���������� ������ �������: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"������ ��� ���������� ����� ��������: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"������ ��� ���������� ������ ������� �� ������� � �������\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"������ ��� ���������� �������\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"������ ��� ������ �������\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"������ ��� �������� ������ �� ������� � �������\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"������ ��� ������ ��������� �� id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"������ ��� ������ �������� �� id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"������ ��� ������ ������� �� id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"������ ��� ������ ������������ �� id\", verbose);",
					"    }",
					"",
					"    async post(path, errorText = \"������ ��� ���������� post-�������: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, null, errorText, verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"������ ��� ���������� post-�������: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"������ ��� ���������� patch-�������: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"������ ��� ���������� get-�������: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async subscriptionExists(userId, subscriberId, verbose=null) {",
					"        return this.get('/users/subscriptions/' + userId + '/' + subscriberId, \"������ ��� ������ ��������\", verbose);",
					"    }",
					"",
					"    async addSubscription(userId, subscriberId, verbose=null) {",
					"        return this.post('/users/subscriptions/' + userId + '/' + subscriberId, \"������ ��� ���������� ����� ��������: \", verbose);",
					"    }",
					"",
					"    async changeSubscriberGroup(userId, subscriberGroup, verbose=null) {",
					"        console.log('Here1')",
					"        return this.post('/admin/users/subscriber/group/' + userId + '?subscriberGroup=' + subscriberGroup, \"������ ��� ��������� ������ ��������� �����������\", verbose)",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"������ ��� ���������� �������: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"��������� ������: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"��� ���������� ������� � ������� �������� �����.\\n\", err,",
					"                             \"\\n��� ������� �������� ��������� ����� �� ������ � ����� ��������� \" + ",
					"                             \"�� ��������� ����������. ������ �������:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"��������� ��������� �������: ��� ��������� - \", response.code, \", ����: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('���������� ������ ���� ������'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "subscriberId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "subscriber1",
			"value": ""
		},
		{
			"key": "subscriber2",
			"value": ""
		},
		{
			"key": "event1",
			"value": ""
		},
		{
			"key": "event2",
			"value": ""
		}
	]
}